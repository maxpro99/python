# Задача № 3.	Есть два списка:
# tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
#
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
# Если в списке klasses меньше элементов, чем в списке tutors,
# необходимо вывести последние кортежи в виде: (<tutor>, None), например:
# ('Станислав', None)
# Доказать, что вы создали именно генератор.
# Проверить его работу вплоть до истощения.
# Подумать, в каких ситуациях генератор даст эффект.


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
klasses_test = ['9А', '7В', '9Б', '9В', '8Б']

# Если klases длиньше tutors, то условия говорят не генерировать дальше.
# А условиями список klases дан длиньше tutors.
tutor_klass_gen = ((tutor, klass) for tutor, klass in zip(tutors, klasses))
print('type(tutor_klass_gen):', type(tutor_klass_gen))  # Посмотрим на тип - вроде должен быть генератор
print(next(tutor_klass_gen))  # 1 шаг генератора
print(next(tutor_klass_gen))  # 2 шаг генератора
print(next(tutor_klass_gen))  # 3 шаг генератора
print(next(tutor_klass_gen))  # 4 шаг генератора
print(next(tutor_klass_gen))  # 5 шаг генератора
print(next(tutor_klass_gen))  # 6 шаг генератора
print(next(tutor_klass_gen))  # 7 шаг генератора
# Надеюсь, работа по шагам дополнительно доказала, что мы создали именно генератор.
# А следующий шаг  выдаст ошибку, поскольку генератор был,
# да весь вышел. Поэтому мы его и закомментировали.
# ЧТД, согласно - "Доказать, что вы создали именно генератор.
# Проверить его работу вплоть до истощения."
# print(next(tutor_klass_gen))


# Но такой вариант переберет только меньшую итерацию,
# поэтому чутка изменим условия задачи,
# и возьмем свой список klasses_test  - покороче,
# а в решении добиваем возможные недостающие элементы в списке klasses_test
# с помощью None.
tutor_klass_gen = (
    (tutor, klass)
    for tutor, klass in zip(tutors, klasses_test + [None for _ in range(len(klasses_test), len(tutors))])
)
print('type(tutor_klass_gen):', type(tutor_klass_gen))  # Посмотрим на тип - вроде должен быть генератор
print(*tutor_klass_gen, sep='\n')
