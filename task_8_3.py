# 3. Написать декоратор для логирования типов позиционных аргументов функции, например:
# def type_logger...
#     ...
#
#
# @type_logger
# def calc_cube(x):
#    return x ** 3
#
# >>> a = calc_cube(5)
# 5: <class 'int'>
# Примечание: если аргументов несколько -
# выводить данные о каждом через запятую;
# >  Позволил себе вывести строками
# можете ли вы вывести тип значения функции?
# > Тип отдаваемого функцией значения или всё-таки тип функции?
# Сможете ли решить задачу для именованных аргументов?
# > Да
# Сможете ли вы замаскировать работу декоратора?
# > Да, хотя задание вроде не подразумевает использование functools
# Сможете ли вывести имя функции, например, в виде:
# >>> a = calc_cube(5)
# calc_cube(5: <class 'int'>)
# Опять же строчку-то можно вывести просто текстом
# Но думаю, что вроде имелось ввиду так, как я сделал.
# Хотя....


import functools


def type_logger(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print(f'В функцию передали вот столько позиционных аргументов: {len(args)}')
        print(f'В функцию передали вот столько именованных аргументов: {len(kwargs)}')
        for n, _ in enumerate(args):
            print(f'{n + 1} позиционный аргумент имеет тип: {type(_)}')
        for n, _ in enumerate(kwargs):
            print(f'{n + 1} именованый аргумент имеет тип: {type(_)}')
        print(f'{calc_cube.__name__}({args[0]}: {type(func(*args, **kwargs))})')
    return wrapper


@type_logger
def calc_cube(*args, **kwargs):
    return args[0] ** 3


calc_cube(2)
calc_cube(2.54)
calc_cube(3, 2.54, [], flag='!!!')
