# 5. Представлен список чисел.
# Определить элементы списка, не имеющие повторений.
# Сформировать из этих элементов список с сохранением
# порядка их следования в исходном списке, например:
# src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# result = [23, 1, 3, 10, 4, 11]
# Подсказка: напишите сначала решение «в лоб». Потом подумайте об оптимизации.

import time
from random import randint

# решение "в лоб"
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
for _ in range(10**3):
    src.append(randint(1, 1000))

start = time.perf_counter()
result = [x for x in src if src.count(x) < 2]
print(time.perf_counter() - start)
print(f'result: {result}')


# Про оптимизацию сказано как-то нечётко -
# по памяти/быстродействию/читаемости кода/питонистости?
# По читаемости кода и питонистости вроде хорошо
# По памяти тоже неплохо
# По скорости тут квадратичная зависимость,
# и её можно серьёзно сократить
# При этом алгоритмически вроде я ее сократил
# Но как сократить именно программно
# Я пока не знаю.
# Сравнительных таблиц стоимости операций не нашёл(((

start = time.perf_counter()
result = src[:]
x = 0
while x < len(result)-1:
    flag = False
    for y in range(len(result)-1, x, -1):
        if result[y] == result[x]:
            flag = True
            result.pop(y)
    if flag:
        result.pop(x)
        x -= 1
    x += 1
print(time.perf_counter() - start)
print(f'result: {result}')
